<!--
    Copyright (c) 2011, 2013 SunGard CSA LLC and others.
    All rights reserved. This program and the accompanying materials
    are made available under the terms of the Eclipse Public License v1.0
    which accompanies this distribution, and is available at
    http://www.eclipse.org/legal/epl-v10.html

    Contributors:
       SunGard CSA LLC - initial API and implementation and/or initial documentation
 -->
<!--
  To execute this build script, you have to configure your environment as follows:
  - Java property java.home must point to an existent JAVA_HOME (either via parameter
    (e.g. antit.bat -Djava.home=C:/Programme/Java16) or create a private.properties file
    in the etc folder of the project and put the property in there)
-->

<project name="carnot-base" default="build" basedir="." xmlns:ipp="com.infinity.bpm.ant.macros">

   <property name="project.dir" value="." />
   <property name="project.src" value="${project.dir}/src/main/java" />
   <property name="project.resources" value="${project.dir}/src/main/resources" />
   <property name="project.etc" value="${project.dir}/etc" />
   <property file="${project.etc}/private.properties" />

   <property name="artifactId" value="carnot-base" />

   <!-- Following variables are possible in copyrightMessage:
        {0}: will be replaced by CurrentVersion.getVersionName(), i.e. major.minor.micro
        {1}: will be replaced by CurrentVersion.COPYRIGHT_YEARS, e.g. 2000-2012
   -->
   <property name="copyright.message" value="Infinity (TM) Process Platform {0}, Copyright (C) SunGard CSA LLC, {1}. All rights reserved." />
   <property name="vendor.name" value="SunGard CSA LLC" />
   <property name="product.name" value="IPP" />

   <import file="${project.dir}/../../build.tools/commons-build.xml" />

   <target name="initOnDevelopment" if="setup.development">
      <echo message="Performing a development build ..." />

      <property name="javac.debuglevel" value="lines,source,vars" />
   </target>

   <target name="initOnProduction" unless="setup.development">
      <echo message="Performing a production build ..." />

      <property name="javac.debuglevel" value="lines,source,vars" />
   </target>

   <target name="init">
      <property name="build.dir" value="${project.dir}/build" />
      <property name="build.classes" value="${build.dir}/classes" />
      <property name="build.javadoc" location="${build.dir}/javadoc" />
      <property name="build.lib" location="${build.dir}/lib" />
      <property name="build.src" value="${build.dir}/src" />
      <property name="build.src.none" location="${build.dir}/src-none" />
      <property name="build.report" location="${build.dir}/report" />
   </target>

	<target name="initCompile" depends="init, initOnDevelopment, initOnProduction, initClasspath" />

   <target name="clean" depends="init" description="removes all build results">
      <delete dir="${build.dir}" />
   </target>

   <target name="initBuild" depends="init">
      <property name="carnot-base.jarfile" value="carnot-base.jar" />
      <property name="carnot-base.jar" location="${build.lib}/${carnot-base.jarfile}" />
      <property name="carnot-base.pomfile" value="carnot-base.pom" />
      <property name="carnot-base.pom" location="${build.lib}/${carnot-base.pomfile}" />
      <property name="carnot-base-javadoc.jarfile" value="carnot-base-javadoc.jar" />
      <property name="carnot-base-javadoc.jar" value="${build.lib}/${carnot-base-javadoc.jarfile}" />
      <property name="carnot-base.src-jarfile" value="carnot-base-sources.jar" />
      <property name="carnot-base.src-jar" value="${build.lib}/${carnot-base.src-jarfile}" />
   </target>

   <target name="initBuildDirectories" depends="initBuild">
      <mkdir dir="${build.classes}" />
      <mkdir dir="${build.lib}" />
      <mkdir dir="${build.src}" />
      <mkdir dir="${build.src.none}" />
   </target>

	<target name="initIvy">
      <echo message="Using Ivy for dependency management." />
      <init-ivy />
   </target>

   <target name="initClasspath" depends="initIvy">
   	<init-ivy-classpath />

      <path id="carnot-base.classpath">
         <path refid="compile.deps" />
      </path>
   </target>

   <target name="prepareSources" depends="initBuildDirectories, prepareSourcesForFastBuild, prepareSourcesForSafeBuild" />

   <target name="prepareSourcesForFastBuild" if="build.fast">
      <echo message="Preparing sources for a fast but potentially unsafe build." />

      <property name="build.src.static" value="${project.src}" />
      <property name="build.src.generated" value="${build.src}" />

      <antcall target="copyVersionSourceFile">
         <param name="source" value="${project.src}" />
         <param name="destination" value="${build.src.generated}" />
      </antcall>
   </target>

   <target name="prepareSourcesForSafeBuild" unless="build.fast">
      <echo message="Preparing sources for a safe but slow build." />

      <property name="build.src.static" value="${build.src.none}" />
      <property name="build.src.generated" value="${build.src}" />

      <mkdir dir="${build.src.generated}/org/eclipse/stardust" />

      <copy todir="${build.src.generated}" overwrite="true">
         <fileset dir="${project.src}">
            <include name="**/*.java" />
            <exclude name="org/eclipse/stardust/common/config/CurrentVersion.java" />
         </fileset>
      </copy>

      <antcall target="copyVersionSourceFile">
         <param name="source" value="${project.src}" />
         <param name="destination" value="${build.src.generated}" />
      </antcall>
   </target>

   <target name="copyVersionSourceFile">
      <copy todir="${destination}" overwrite="true">
         <fileset dir="${source}">
            <include name="org/eclipse/stardust/common/config/CurrentVersion.java" />
         </fileset>
         <filterset>
            <filter token="major" value="${ipp.version.major}" />
            <filter token="minor" value="${ipp.version.minor}" />
            <filter token="micro" value="${ipp.version.micro}" />
            <filter token="build" value="${ipp.version.build}" />
            <filter token="copyrightMessage" value="${copyright.message}" />
            <filter token="vendor.name" value="${vendor.name}" />
            <filter token="product.name" value="${product.name}" />
         </filterset>
      </copy>
   </target>

   <target name="compile" depends="prepareSources, initCompile" unless="skip.compile"
   	description="Compiles the project's Java classes">
      <!-- if build.fast property is set - only CurrentVersion class is compiled here. Otherwise all classes are compiled -->
      <ipp:javac-java6 destdir="${build.classes}"
         srcdir="${build.src.generated}" sourcepath="${build.src.generated}:${build.src.static}">
         <include name="**/*.java" />
         <classpath id="compile6.classpath">
            <path path="${build.classes}" />
            <path refid="carnot-base.classpath" />
         </classpath>
      </ipp:javac-java6>

      <!-- compile all other classes if it is not done by the previous step -->
      <ipp:javac-java6 destdir="${build.classes}"
         srcdir="${build.src.static}" sourcepath="${build.src.generated}:${build.src.static}">
         <exclude name="**/CurrentVersion.java" />
         <classpath refid="compile6.classpath" />
      </ipp:javac-java6>
   </target>

   <target name="jar" depends="compile">
      <ipp:jar jarfile="${carnot-base.jar}" implementationTitle="Infinity Process Base - Base Packages">
         <fileset dir="${build.classes}" id="fileset.carnot-base.jar">
         	<include name="**/*.class" />
         </fileset>
         <fileset dir="${project.resources}" includes="**/*.*" />
      </ipp:jar>
   </target>

   <target name="jar.src" depends="compile">
      <delete file="${carnot-base.src-jar}" />
      <ipp:jar jarfile="${carnot-base.src-jar}" implementationTitle="Infinity Process Base - Base Packages (Sources)"
         duplicate="preserve">
         <fileset dir="${build.src.generated}">
            <include name="**/*.java" />
         </fileset>
         <fileset dir="${build.src.static}">
            <include name="**/*.java" />
         </fileset>
      </ipp:jar>
   </target>

   <target name="javadoc" depends="initIvy">
      <ipp:javadoc destdir="${build.javadoc}" scope="common" doctitle="${product.productnameonly} Common API" windowtitle="${artifactId}"
         packagenames="org.eclipse.stardust.common, org.eclipse.stardust.common.log, org.eclipse.stardust.common.error, org.eclipse.stardust.common.security, org.eclipse.stardust.common.security.authentication">
         <classpaths>
            <classpath>
               <path location="${build.classes}" />
               <path refid="carnot-base.classpath" />
            </classpath>
         </classpaths>
         <fileSets>
            <fileset dir="${project.src}">
               <include name="org/eclipse/stardust/common/DateUtils.java" />
               <include name="org/eclipse/stardust/common/Direction.java" />
               <include name="org/eclipse/stardust/common/Flushable.java" />
               <include name="org/eclipse/stardust/common/IntKey.java" />
               <!-- todo: rework that class before including again to javadoc -->
               <!--include name="base/Money.java"/ -->
               <include name="org/eclipse/stardust/common/Pair.java" />
               <include name="org/eclipse/stardust/common/Period.java" />
               <include name="org/eclipse/stardust/common/StringKey.java" />
               <!-- to be clarified: <include name="org/eclipse/stardust/common/log/Category.java" /> -->
               <include name="org/eclipse/stardust/common/log/LogManager.java" />
               <include name="org/eclipse/stardust/common/log/Logger.java" />
               <include name="org/eclipse/stardust/common/error/AccessForbiddenException.java" />
               <include name="org/eclipse/stardust/common/error/ApplicationException.java" />
               <include name="org/eclipse/stardust/common/error/ConcurrencyException.java" />
               <include name="org/eclipse/stardust/common/error/ErrorCase.java" />
               <include name="org/eclipse/stardust/common/error/ExpectedFailureException.java" />
               <include name="org/eclipse/stardust/common/error/InternalException.java" />
               <include name="org/eclipse/stardust/common/error/InvalidArgumentException.java" />
               <include name="org/eclipse/stardust/common/error/InvalidValueException.java" />
               <include name="org/eclipse/stardust/common/error/LoginFailedExceptionException.java" />
               <include name="org/eclipse/stardust/common/error/ObjectNotFoundException.java" />
               <include name="org/eclipse/stardust/common/error/PublicException.java" />
               <include name="org/eclipse/stardust/common/error/ServiceCommandException.java" />
               <include name="org/eclipse/stardust/common/error/ValidationException.java" />
               <include name="org/eclipse/stardust/common/error/WorkflowException.java" />
            	
               <include name="org/eclipse/stardust/common/config/Parameters.java" />
               
               <include name="org/eclipse/stardust/common/security/InvalidPasswordException.java" />
               <include
                  name="org/eclipse/stardust/common/security/authentication/DefaultCallbackHandler.java" />
               <include name="org/eclipse/stardust/common/security/authentication/LoginFailedException.java" />
            </fileset>
         </fileSets>
      </ipp:javadoc>
      <ipp:jar jarfile="${carnot-base-javadoc.jar}" implementationTitle="${product.productnameshort} Process Base - Javadoc">
         <fileset dir="${build.javadoc}" />
      </ipp:jar>
   </target>

   <target name="build" depends="jar, jar.src, javadoc" xmlns:ivy="antlib:org.apache.ivy.ant">
      <ivy:resolve file="${project.dir}/base-interface-ivy.xml" />
      <ivy-publish-local ivyFile="${project.dir}/base-interface-ivy.xml" artifactId="base-artifacts" artifactDir="${build.lib}" publishPom="false" />

      <ivy:resolve file="${project.dir}/ivy.xml" />
      <ivy-publish-local artifactId="${artifactId}" artifactDir="${build.lib}"
         conf="stardust-engine-base-compile, stardust-engine-base-runtime, stardust-engine-base-compile-optional,
         stardust-engine-base-sources, stardust-engine-base-javadoc, logging-log4j-provider-compile"
         publishIvy="true" />
      <ivy-publish-local artifactId="${artifactId}" artifactDir="${build.lib}" conf="pom" publishIvy="false" publishPom="false" />

      <ivy:resolve file="${project.dir}/module-ivy.xml" />
      <ivy-make-module-poms ivyFile="module-ivy.xml" pomFilePath="${build.lib}" moduleName="base-module" />
      <ivy-make-module-poms ivyFile="module-ivy.xml" pomFilePath="${build.lib}" moduleName="logging-log4j-module" />

      <ivy-publish-local ivyFile="${project.dir}/module-ivy.xml" artifactId="stardust-engine-base-module" artifactDir="${build.lib}" publishPom="false">
         <additional-artifacts>
            <artifacts pattern="${build.lib}/base-module.pom" />
            <artifacts pattern="${build.lib}/logging-log4j-module.pom" />
         </additional-artifacts>
      </ivy-publish-local>

      <ivy:retrieve file="${build.lib}/carnot-base.ivy.xml" pattern="${build.lib}/[artifact]-[revision].[ext]"
         conf="stardust-engine-base-compile, logging-log4j-provider-compile" module="stardust-engine-base" />
   </target>

   <target name="dist" depends="build">
      <property name="stardust.dir" value="../.." />
      <copy file="${carnot-base.jar}" todir="${stardust.dir}/ide/engine/org.eclipse.stardust.ide.engine.base/lib" />
      <copy file="${carnot-base.src-jar}" todir="${stardust.dir}/ide/engine/org.eclipse.stardust.ide.engine.base/lib" />
   </target>

   <target name="deploy" depends="build, dependencies:report" />

   <target name="install" if="maven.localRepository" depends="initBuild"
      description="installs the artifacts into a local Maven repository">

      <ipp:init-mvn localMavenRepository="${maven.localRepository}" />
      <ipp:mvn-install file="${carnot-base.jar}" pomFile="${carnot-base.pom}" />
      <ipp:mvn-install pomFile="${build.lib}/base-module.pom" />
      <ipp:mvn-install pomFile="${build.lib}/logging-log4j-module.pom" />
   </target>

   <target name="publish" depends="initBuild"
     description="publish artifacts into a remote Maven repository">

      <ipp:init-mvn />
   	<ipp:mvn-deploy file="${carnot-base.jar}" pomFile="${carnot-base.pom}" />
      <ipp:mvn-deploy pomFile="${build.lib}/base-module.pom" />
      <ipp:mvn-deploy pomFile="${build.lib}/logging-log4j-module.pom" />
   </target>

   <!-- target is invoked by stardust-engine-nls project -->
   <target name="copy-nls-resources"
      description="copies the resources into a given folder">
      <copy todir="${build.nls.dir}">
         <fileset dir="${project.resources}">
            <include name="**/*_de.properties"/>
            <include name="**/*_en.properties"/>
            <include name="**/*_zh_CN.properties"/>
            <include name="**/*_zh_TW.properties"/>
         </fileset>
      </copy>
   </target>

   <target name="dependencies:report" depends="init,initIvy">
      <ivy-report ivyFile="${project.dir}/base-interface-ivy.xml" conf="interface-all" outputDir="${build.report}" />
      <ivy-report ivyFile="${project.dir}/ivy.xml" outputDir="${build.report}" />
      <ivy-report ivyFile="${project.dir}/module-ivy.xml" outputDir="${build.report}" />
   </target>

</project>
