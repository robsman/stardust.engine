<!--
    Copyright (c) 2011 SunGard CSA LLC and others.
    All rights reserved. This program and the accompanying materials
    are made available under the terms of the Eclipse Public License v1.0
    which accompanies this distribution, and is available at
    http://www.eclipse.org/legal/epl-v10.html
   
    Contributors:
       SunGard CSA LLC - initial API and implementation and/or initial documentation
 -->
<!--
  To execute this build script, you have to configure your environment as follows:
  - Java property java.home must point to an existent JAVA_HOME (either via parameter
    (e.g. antit.bat -Djava.home=C:/Programme/Java15) or create a private.properties file
    in the etc folder of the project and put the property in there)
-->

<project name="stardust-engine-camel" default="build" basedir="." xmlns:ipp="com.infinity.bpm.ant.macros">
	<property environment="env" />
	<property name="project.dir" value="." />
	<property name="project.src" value="${project.dir}/src/main/java" />
	<property name="project.resources" value="${project.dir}/src/main/resources" />
	<property name="project.etc" value="${project.dir}/etc" />
	<property file="${project.etc}/private.properties" />

	<property name="artifactId" value="stardust-engine-camel" />
	<import file="${project.dir}/../../build.tools/commons-build.xml" />
	<target name="initOnDevelopment" if="setup.development">
		<echo message="Performing a development build ..." />

		<property name="javac.debuglevel" value="lines,source,vars" />
	</target>

	<target name="initOnProduction" unless="setup.development">
		<echo message="Performing a production build ..." />

		<property name="javac.debuglevel" value="lines,source,vars" />
	</target>

	<target name="init" depends="initOnDevelopment, initOnProduction, initBuildDir">
		<property name="build.dir" value="${build.home}" />
		<property name="mvn.build.dir" value="${mvn.build.dir}" />

	</target>

	<target name="clean" depends="init" description="removes all build results">
		<delete dir="${build.dir}" />
		<delete dir="${mvn.build.dir}" />
	</target>

	<target name="initBuildDir" unless="build.home">
		<property name="build.home" value="${project.dir}/build" />
		<property name="mvn.build.dir" value="${project.dir}/target" />
	</target>

	<target name="initBuild" depends="init, initBuildDir">
		<property name="build.dir" value="${build.home}" />
		<property name="build.classes" value="${build.dir}/classes" />
		<property name="build.lib" value="${build.dir}/lib" />
      <property name="global.build.lib" value="${build.lib}/3rdParty" />
		<property name="build.src" value="${build.dir}/src" />
		<property name="build.src.none" location="${build.dir}/src-none" />

		<property name="stardust-engine-camel.jarfile" value="stardust-engine-camel.jar" />
		<property name="stardust-engine-camel.jar" value="${build.lib}/${stardust-engine-camel.jarfile}" />
		<property name="stardust-engine-camel-module.pom" value="${build.lib}/stardust-engine-camel-module.pom" />

		<property name="stardust-engine-camel.src-jarfile" value="stardust-engine-camel-sources.jar" />
		<property name="stardust-engine-camel.src-jar" value="${build.lib}/${stardust-engine-camel.src-jarfile}" />
	</target>

	<target name="initBuildDirectories" depends="initBuild">
		<mkdir dir="${build.classes}" />
		<mkdir dir="${build.lib}" />
		<mkdir dir="${build.src}" />
		<mkdir dir="${build.src.none}" />
	</target>

	<target name="initIvy">
		<echo message="Using Ivy for dependency management." />
		<init-ivy />
	</target>

	<target name="initClasspath" depends="init, initIvy">
		<init-ivy-classpath />

		<path id="stardust-engine-camel.classpath">
			<path refid="compile.deps" />
		</path>
	</target>

	<target name="prepareSources" depends="initBuild">
		<echo message="Preparing sources for a safe but slow build." />
		<copy todir="${build.src}" overwrite="true">
			<fileset dir="${project.src}">
				<include name="**/*.java" />
			</fileset>
		</copy>
		<replace dir="${build.src}" token="import org.eclipse.xsd" 
         value="import com.infinity.bpm.thirdparty.xsd" summary="true"/>
		<replace dir="${build.src}" token="import org.eclipse.stardust.engine.core.struct.emfxsd" 
         value="import org.eclipse.stardust.engine.core.struct.emfxsd.runtime" summary="true"/>
	</target>

	<target name="compile" depends="initClasspath, initBuildDirectories, prepareSources" unless="skip.compile" description="Compiles the project's Java classes">
		<ipp:javac-java6 destdir="${build.classes}" srcdir="${build.src}">
			<include name="**/*.java" />

			<classpath refid="stardust-engine-camel.classpath"/>
		</ipp:javac-java6>
		<copy todir="${build.classes}">
			<fileset dir="${project.resources}">
				<include name="**/META-INF/services/**/*" />
			</fileset>
		</copy>
	</target>

	<target name="jar" depends="compile">
		<ipp:jar jarfile="${stardust-engine-camel.jar}" implementationTitle="Infinity Process Platform - Camel Application Type RT">
			<fileset dir="${build.classes}" id="fileset.stardust-engine-camel.jar">
				<include name="**/*.class" />
				<include name="**/META-INF/**/*" />
			</fileset>
		</ipp:jar>
	</target>

	<target name="jar.src" depends="compile">
		<delete file="${stardust-engine-camel.src-jar}" />
		<ipp:jar jarfile="${stardust-engine-camel.src-jar}" implementationTitle="Infinity Process Platform - Camel Application Type RT">
			<fileset dir="${project.src}">
				<include name="**/*.java" />
			</fileset>
		</ipp:jar>
	</target>

	<target name="build" depends="jar, jar.src" xmlns:ivy="antlib:org.apache.ivy.ant">
		<ivy:resolve file="${project.dir}/ivy.xml" />
		<ivy-make-module-poms ivyFile="${project.dir}/ivy.xml" pomFilePath="${build.lib}" moduleName="stardust-engine-camel-module" />
		<ivy-publish-local artifactId="${artifactId}" artifactDir="${build.lib}" publishIvy="true" />
      <ivy:retrieve file="${project.dir}/ivy.xml" conf="stardust-camel-module-runtime" 
         pattern="${build.lib}/[artifact]-[revision].[ext]" transitive="false" />
      <!-- remove duplicated dependencies -->
      <delete>
         <fileset dir="${build.lib}">
            <present present="both" targetdir="${global.build.lib}/spring"/>
         </fileset>
         <fileset dir="${build.lib}">
            <present present="both" targetdir="${global.build.lib}/ext"/>
         </fileset>
         <fileset dir="${build.lib}">
            <present present="both" targetdir="${global.build.lib}/jms"/>
         </fileset>
         <fileset dir="${build.lib}">
            <present present="both" targetdir="${global.build.lib}/engine-ws-cxf"/>
         </fileset>
         <fileset dir="${build.lib}">
            <present present="both" targetdir="${global.build.lib}"/>
         </fileset>
         <fileset dir="${build.lib}">
            <include name="carnot-*.jar"/>
         </fileset>
      </delete>
	</target>

	<target name="dist" depends="build">
		<property name="stardust.dir" value="../../../stardust" />
		<copy file="${stardust-engine-camel.jar}" todir="${stardust.dir}/modeler/ide/org.eclipse.stardust.modeling.integration.camel/lib" />
		<copy file="${stardust-engine-camel.src-jar}" todir="${stardust.dir}/modeler/ide/org.eclipse.stardust.modeling.integration.camel/lib" />
	</target>

	<target name="deploy" depends="build,dependencies:report " />

  <target name="install" if="maven.localRepository" depends="initBuild" description="installs the artifacts into a local Maven repository">
    <ipp:init-mvn localMavenRepository="${maven.localRepository}" />
    <ipp:mvn-install file="${stardust-engine-camel.jar}" pomFile="${build.lib}/stardust-engine-camel.pom" />
  </target>

  <target name="publish" depends="initBuild" description="publish artifacts into a remote Maven repository">
    <ipp:init-mvn />
    <ipp:mvn-deploy file="${stardust-engine-camel.jar}" pomFile="${build.lib}/stardust-engine-camel.pom" />
  </target> 
  
  <target name="dependencies:report" depends="init,initIvy">
    <property name="build.report" location="${build.dir}/report" />
    <ivy-report ivyFile="${project.dir}/ivy.xml" outputDir="${build.report}" />
  </target>
    
</project>
