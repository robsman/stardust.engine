<!--
    Copyright (c) 2011 SunGard CSA LLC and others.
    All rights reserved. This program and the accompanying materials
    are made available under the terms of the Eclipse Public License v1.0
    which accompanies this distribution, and is available at
    http://www.eclipse.org/legal/epl-v10.html

    Contributors:
       SunGard CSA LLC - initial API and implementation and/or initial documentation
 -->

<!--
  To execute this build script, you have to configure your environment as follows:
  - Java property java.home must point to an existent JAVA_HOME (either via parameter
    (e.g. antit.bat -Djava.home=C:/Programme/Java15) or create a private.properties file
    in the etc folder of the project and put the property in there)
-->

<project name="carnot-engine" default="deploy" basedir="." xmlns:ipp="com.infinity.bpm.ant.macros">

   <property name="project.dir" location="${basedir}" />
   <property name="project.etc" value="${project.dir}/etc" />
   <property name="project.src" location="${project.dir}/src/main/java" />
   <property name="project.res" location="${project.dir}/src/main/resources" />
   <property name="project.test" location="${project.dir}/src/test" />
   <property name="project.test.src" location="${project.test}/java" />
   <property name="project.test.res" location="${project.test}/resources" />

   <property file="${project.etc}/private.properties" />
   <import file="../../build.tools/commons-build.xml" />

   <property name="build.dir" value="build" />

   <property name="service.dir" location="${project.src}/org/eclipse/stardust/engine/api/ejb2" />
   <property name="serviceTemp.dir" location="${build.dir}/temp/org/eclipse/stardust/engine/api/ejb2" />

   <property name="stardust.ide.engine.dir" location="../../ide/engine" />
   <available property="stardust.ide.engine.dir.present" file="${stardust.ide.engine.dir}" type="dir" />

   <target name="jar" depends="compile, checkCodeGen, init.jarjar">
      <ipp:jarjar jarfile="${carnot.client.jar}" implementationTitle="Infinity Process Engine - Client">

         <rule pattern="org.eclipse.emf.**" result="com.infinity.bpm.thirdparty.emf.@1" />
         <rule pattern="org.eclipse.xsd.**" result="com.infinity.bpm.thirdparty.xsd.@1" />
         <rule pattern="org.mozilla.**" result="com.infinity.bpm.thirdparty.org.mozilla.@1" />
         <rule pattern="**.emfxsd.**" result="@1.emfxsd.runtime.@2" />

         <zipfileset src="${emf-common.jar}"
            excludes="about.html, about.ini, about.mappings, about.properties, modeling32.png, plugin.properties, plugin.xml, META-INF/**/*"/>
         <zipfileset src="${emf-ecore.jar}"
            excludes="about.html, about.ini, about.mappings, about.properties, modeling32.png, plugin.properties, plugin.xml, META-INF/**/*, model/**/*, schema/**/*, org/eclipse/emf/ecore/doc-files/**/*, org/eclipse/emf/ecore/resource/doc-files/**/*" />
         <zipfileset src="${emf-ecore-xmi.jar}"
            excludes="about.html, plugin.properties, plugin.xml, META-INF/**/*" />
         <zipfileset src="${emf-xsd.jar}"
            excludes="about.html, about.ini, about.mappings, about.properties, modeling32.png, plugin.properties, plugin.xml, META-INF/**/*, model/**/*, cache/**/*, org/eclipse/xsd/doc-files/**/*" />
         <zipfileset src="${emf-xsd.jar}" includes="plugin.properties, cache" prefix="com/infinity/bpm/thirdparty/xsd" />

         <zipfileset src="${js.jar}" />

         <fileset dir="${build.classes}" id="fileset.carnot.client.jar">

            <include name="META-INF/resources/models/**" />
            <include name="META-INF/services/org.eclipse.stardust.*" />
            <include name="META-INF/services/com.*" />
            <include name="META-INF/services/ag.*" />

            <include name="org/eclipse/stardust/**" />
            <include name="ag/**" />
            <include name="com/infinity/**" />
            <include name="**/*_de.properties" />
            <include name="**/*_en.properties" />
            <include name="**/*_zh_CN.properties" />

            <exclude name="org/eclipse/stardust/engine/api/ejb2/tools/*.class"/>
         </fileset>
         <fileset dir="${project.res}">
            <include name="about.html" />
            <include name="about_files/*" />
         </fileset>
      </ipp:jarjar>

      <ipp:jar jarfile="${carnot.emf.xsd.integration.jar}" implementationTitle="CARNOT EMF XSD Integration">
         <fileset dir="${build.classes}" id="fileset.carnot.emfxsd.jar">
            <include name="**/emfxsd/*.class" />
         </fileset>
      </ipp:jar>

      <ipp:jarjar jarfile="${carnot.engine.jar}" implementationTitle="Infinity Process Engine - Runtime">

         <rule pattern="org.eclipse.emf.**" result="com.infinity.bpm.thirdparty.emf.@1" />
         <rule pattern="org.eclipse.xsd.**" result="com.infinity.bpm.thirdparty.xsd.@1" />
         <rule pattern="org.mozilla.**" result="com.infinity.bpm.thirdparty.org.mozilla.@1" />

         <rule pattern="**.emfxsd.**" result="@1.emfxsd.runtime.@2" />

         <zipfileset src="${emf-common.jar}"
            excludes="about.html, about.ini, about.mappings, about.properties, modeling32.png, plugin.properties, plugin.xml, META-INF/**/*" />
         <zipfileset src="${emf-ecore.jar}"
            excludes="about.html, about.ini, about.mappings, about.properties, modeling32.png, plugin.properties, plugin.xml, META-INF/**/*, model/**/*, schema/**/*, org/eclipse/emf/ecore/doc-files/**/*, org/eclipse/emf/ecore/resource/doc-files/**/*" />
         <zipfileset src="${emf-ecore-xmi.jar}"
            excludes="about.html, plugin.properties, plugin.xml, META-INF/**/*" />
         <zipfileset src="${emf-xsd.jar}"
            excludes="about.html, about.ini, about.mappings, about.properties, modeling32.png, plugin.properties, plugin.xml, META-INF/**/*, model/**/*, cache/**/*, org/eclipse/xsd/doc-files/**/*" />
         <zipfileset src="${emf-xsd.jar}" includes="plugin.properties, cache/**" prefix="com/infinity/bpm/thirdparty/xsd" />

         <zipfileset src="${js.jar}" />

         <fileset dir="${build.classes}" id="fileset.carnot.engine.jar">

            <include name="META-INF/resources/models/**" />
            <include name="META-INF/services/org.eclipse.stardust.*" />
            <include name="META-INF/services/com.*" />
            <include name="META-INF/services/ag.*" />

            <include name="org/eclipse/stardust/**" />
            <include name="ag/**" />
            <include name="com/infinity/**" />
            <include name="**/*_de.properties" />
            <include name="**/*_en.properties" />
            <include name="**/*_zh_CN.properties" />

            <exclude name="org/eclipse/stardust/engine/api/ejb2/tools/*.class"/>
         </fileset>
         <fileset dir="${project.res}">
            <include name="about.html" />
            <include name="about_files/*" />
         </fileset>
      </ipp:jarjar>

      <copy todir="${build.lib}" file="${carnot.engine.jar}" />
   </target>

   <target name="jar.src" depends="compile">
      <ipp:jar jarfile="${carnot.client.src-jar}" excludes="*.jar" duplicate="preserve" implementationTitle="Infinity Process Engine - Client Sources">
         <fileset dir="${build.src.generated}" excludes="*.jar" />
         <fileset dir="${build.src.static}" excludes="*.jar" />
      </ipp:jar>
      <ipp:jar jarfile="${carnot.engine.src-jar}" excludes="*.jar" duplicate="preserve" implementationTitle="Infinity Process Engine - Runtime Sources">
         <fileset dir="${build.src.generated}" excludes="*.jar" />
         <fileset dir="${build.src.static}" excludes="*.jar" />
      </ipp:jar>
      <ipp:jar jarfile="${carnot.emf.xsd.integration.src-jar}" excludes="*.jar" duplicate="preserve" implementationTitle="Infinity Process Engine - EMF XSD Integration Sources">
         <fileset dir="${build.src.generated}" excludes="*.jar">
            <include name="ag/carnot/bpm/rt/data/structured/emfxsd/**/*.*" />
         </fileset>
         <fileset dir="${build.src.static}" excludes="*.jar">
            <include name="ag/carnot/bpm/rt/data/structured/emfxsd/**/*.*" />
         </fileset>
      </ipp:jar>
   </target>

   <target name="deploy.src" depends="jar.src">
      <delete includeemptydirs="true">
         <fileset dir="${build.src}" excludes="*.jar" />
      </delete>
      <delete dir="${build.src.none}" />
   </target>

   <target name="deploy.classes" depends="jar">
      <delete dir="${build.classes}" />
   </target>

   <target name="compile" depends="prepareSources, initKernelBuildDirectories, initClasspath, compile.jdk16"
   	unless="skip.compile" description="compiles the carnot kernel classes" />

   <target name="compile.jdk16" depends="init"
      description="Compiling Java 1.6 code">

      <ipp:javac-java6
         srcdir="${build.src.generated}" sourcepath="${build.src.generated}:${build.src.static}"
         destdir="${build.classes}">

         <patternset refid="kernel.sources.exclude" />

         <classpath id="compile.classpath">
            <path refid="carnot.classpath" />
            <path refid="secret.classpath" />
         </classpath>
      </ipp:javac-java6>

      <ipp:javac-java6
         srcdir="${build.src.static}" sourcepath="${build.src.generated}:${build.src.static}"
         destdir="${build.classes}">

         <patternset refid="kernel.sources.exclude" />
         <classpath refid="compile.classpath" />

      </ipp:javac-java6>
   </target>

   <target name="prepareSources" depends="initKernelBuild, prepareSourcesExclusions, prepareSourcesForFastBuild, prepareSourcesForSafeBuild" />

   <target name="prepareSourcesExclusions">
      <patternset id="kernel.sources.exclude">
         <exclude name="org/eclipse/stardust/**/junit/**/*.java" />
         <exclude name="org/eclipse/stardust/**/test/**/*.java" />
         <exclude name="org/eclipse/stardust/**/TestPackage.java" />
         <exclude name="org/eclipse/stardust/**/autolist/console/*.java" />
         <exclude name="ag/carnot/**/web/*/**/*.java" />
         <exclude name="ag/carnot/**/wap/**/*.java" />
         <exclude name="ag/carnot/**/junit/**/*.java" />
         <exclude name="ag/carnot/**/test/**/*.java" />
         <exclude name="ag/carnot/**/TestPackage.java" />
         <exclude name="ag/carnot/**/autolist/console/*.java" />
      </patternset>
   </target>

   <target name="prepareSourcesForFastBuild" depends="initKernelBuildDirectories" if="build.fast">
      <echo message="Preparing sources for a fast but potentially unsafe build." />

      <property name="build.src.static" value="${project.src}" />
      <property name="build.src.generated" value="${build.src}" />
   </target>

   <target name="prepareSourcesForSafeBuild" depends="initKernelBuildDirectories" unless="build.fast">
      <echo message="Preparing sources for a safe but slow build." />

      <property name="build.src.static" value="${build.src.none}" />
      <property name="build.src.generated" value="${build.src}" />

      <mkdir dir="${build.src.generated}/ag/carnot" />
      <mkdir dir="${build.src.generated}/com/infinity" />

      <copy todir="${build.src.generated}">
         <fileset dir="${project.src}">
            <include name="**/*.java" />
            <include name="**/package.html" />
            <patternset refid="kernel.sources.exclude" />
         </fileset>
      </copy>
   </target>

   <target name="copyDatFiles" depends="initKernelBuildDirectories">

      <mkdir dir="${build.classes}/META-INF/resources/models" />
      <copy todir="${build.classes}/META-INF/resources/models">
         <fileset dir="${project.res}/META-INF/resources/models" includes="*" />
      </copy>
      
      <copy todir="${build.classes}">
         <fileset dir="${project.res}" includes="**/*_de.properties" />
         <fileset dir="${project.res}" includes="**/*_en.properties" />
         <fileset dir="${project.res}" includes="**/*_zh_CN.properties" />
      </copy>
      
      <mkdir dir="${build.classes}/META-INF/services" />
      <copy todir="${build.classes}/META-INF/services">
         <fileset dir="${project.res}/META-INF/services" includes="*" />
      </copy>

      <copy file="${project.res}/org/eclipse/stardust/engine/core/model/beans/WorkflowModel.dtd" todir="${build.classes}/org/eclipse/stardust/engine/core/model/beans" />
      <copy file="${project.res}/org/eclipse/stardust/engine/core/model/beans/WorkflowModel.xsd" todir="${build.classes}/org/eclipse/stardust/engine/core/model/beans" />

      <copy file="${project.res}/org/eclipse/stardust/engine/core/model/xpdl/carnot2xpdl.xslt" todir="${build.classes}/org/eclipse/stardust/engine/core/model/xpdl" />
      <copy file="${project.res}/org/eclipse/stardust/engine/core/model/xpdl/xpdl2carnot.xslt" todir="${build.classes}/org/eclipse/stardust/engine/core/model/xpdl" />
      <copy file="${project.res}/org/eclipse/stardust/engine/core/model/xpdl/TC-1025_schema_10_xpdl.xsd" todir="${build.classes}/org/eclipse/stardust/engine/core/model/xpdl" />
      <copy file="${project.res}/org/eclipse/stardust/engine/core/model/xpdl/carnot-xpdl.xsd" todir="${build.classes}/org/eclipse/stardust/engine/core/model/xpdl" />
      <copy file="${project.res}/org/eclipse/stardust/engine/core/model/xpdl/xpdl.xsd" todir="${build.classes}/org/eclipse/stardust/engine/core/model/xpdl" />

      <copy file="${project.res}/org/eclipse/stardust/engine/core/runtime/setup/carnot-runtime-setup.xsd" todir="${build.classes}/org/eclipse/stardust/engine/core/runtime/setup" />

      <copy file="${project.res}/org/eclipse/stardust/engine/core/upgrade/framework/WorkflowModel.dtd" todir="${build.classes}/org/eclipse/stardust/engine/core/upgrade/framework" />

      <copy todir="${build.classes}">
         <fileset dir="${project.res}" includes="org/eclipse/stardust/**" />
      </copy>

   </target>

   <target name="copyJars" depends="init, dependencies:publish-local" />

   <target name="init" depends="initOnDevelopment, initOnProduction" />

   <target name="initOnProduction" unless="setup.development">
      <echo message="Performing a production build ..." />

      <property name="javac.debuglevel" value="lines,source" />
   </target>

   <target name="initOnDevelopment" if="setup.development">
      <echo message="Performing a development build ..." />

      <property name="javac.debuglevel" value="lines,source,vars" />
   </target>

   <target name="initKernelBuild" depends="init">
      <property name="build.classes" location="${build.dir}/classes" />
      <property name="build.lib" location="${build.dir}/lib" />
      <property name="build.lib.src" location="${build.dir}/src" />
      <property name="build.src" location="${build.dir}/src" />
      <property name="build.src.none" location="${build.dir}/src-none" />

      <property name="carnot.client.jarfile" value="carnot-client.jar" />
      <property name="carnot.client.jar" location="${build.lib}/${carnot.client.jarfile}" />
      <property name="carnot.client.src-jarfile" value="carnot-client-sources.jar" />
      <property name="carnot.client.src-jar" location="${build.lib.src}/${carnot.client.src-jarfile}" />

      <property name="carnot.engine.jarfile" value="carnot-engine.jar" />
      <property name="carnot.engine.jar" location="${build.lib}/${carnot.engine.jarfile}" />
      <property name="carnot.engine.src-jarfile" value="carnot-engine-sources.jar" />
      <property name="carnot.engine.src-jar" location="${build.lib.src}/${carnot.engine.src-jarfile}" />

      <property name="carnot.emf.xsd.integration.jarfile" value="carnot-emf-xsd-integration.jar" />
      <property name="carnot.emf.xsd.integration.jar" location="${build.lib}/${carnot.emf.xsd.integration.jarfile}" />
      <property name="carnot.emf.xsd.integration.src-jarfile" value="carnot-emf-xsd-integration-sources.jar" />
      <property name="carnot.emf.xsd.integration.src-jar" location="${build.lib.src}/${carnot.emf.xsd.integration.src-jarfile}" />

   </target>

   <import file="build-dependencies-${dependencies.mode}.xml" />

   <target name="initClasspath" depends="init, dependencies:initClasspath" />

   <target name="initKernelBuildDirectories" depends="initKernelBuild">
      <mkdir dir="${build.classes}" />
      <mkdir dir="${build.lib}" />
      <mkdir dir="${build.lib.src}" />
      <mkdir dir="${build.src}" />
      <mkdir dir="${build.src.none}" />
   </target>

   <target name="init.jarjar">
      <ipp:init-jarjar classpathref="jarjar.classpath" />
   </target>

   <!--                                  -->
   <!--   Test Targets                   -->
   <!--                                  -->

   <target name="runTests" depends="compileTests" description="runs the Infinity tests">
      <!-- Classpath For JUnit Tests -->
      <path id="run.junit.test.classpath">
         <path refid="junit.test.classpath" />
         <path refid="junit.test.license.classpath" />
         <path refid="run.test.classpath" />
         <pathelement location="${build.tests.classes}" />
         <pathelement location="${build.tests.etc}" />
         <!-- Service Provider mechanism needs JAR although the classpath is already set to ${build.classes} -->
         <pathelement location="${build.lib}/carnot-engine.jar" />
      </path>

      <!-- Sanity Test Suite -->
      <junit fork="yes" haltonfailure="on" haltonerror="on">
         <test name="org.eclipse.stardust.engine.SanityTestSuite" />
         <formatter type="brief" usefile="false" />
         <classpath refid="run.junit.test.classpath" />
      </junit>

      <!-- Application Instance Test Suite -->
      <junit fork="yes" haltonfailure="on" haltonerror="on">
         <test name="org.eclipse.stardust.engine.extensions.ApplicationInstanceTestSuite" />
         <formatter type="brief" usefile="false" />
         <classpath refid="run.junit.test.classpath" />
      </junit>
   </target>

   <target name="compileTests" depends="compile, copyTestsSourceFiles, copyTestsDatFiles, initClasspath" 
   	unless="skip.compile" description="compiles the Infinity test classes">
      <javac srcdir="${build.tests.src}" destdir="${build.tests.classes}" debug="true" deprecation="no" includes="**/*.java">
         <classpath refid="junit.test.classpath" />
         <classpath refid="junit.test.license.classpath" />
      </javac>
   </target>

   <target name="copyTestsSourceFiles" depends="initTestsBuildDirectories">
      <mkdir dir="${build.tests.src}/org/eclipse/stardust" />
      <copy todir="${build.tests.src}/org/eclipse/stardust">
         <fileset dir="${project.test.src}/org/eclipse/stardust">
            <include name="**/*.java" />
         </fileset>
      </copy>
   </target>

   <target name="initTestsBuildDirectories" depends="initTestBuild">
      <mkdir dir="${build.tests}" />
      <mkdir dir="${build.tests.classes}" />
      <mkdir dir="${build.tests.etc}" />
      <mkdir dir="${build.tests.lib}" />
      <mkdir dir="${build.tests.src}" />
   </target>

   <target name="initTestBuild" depends="initTestsBuildDirProperties, initTestsArchiveProperties">
      <path id="junit.test.classpath">
         <path refid="carnot.classpath" />
         <path refid="secret.classpath" />
         <path refid="jta.classpath" />
         <path refid="jms.classpath" />
         <path refid="test.classpath" />
         <pathelement path="${build.classes}" />
      </path>
      <path id="junit.test.license.classpath">
         <pathelement path="${build.dir}/license/classes" />
      </path>
   </target>

   <target name="initTestsBuildDirProperties" depends="init">
      <property name="build.tests" value="${build.dir}/tests" />
      <property name="build.tests.bin" value="${build.tests}/bin" />
      <property name="build.tests.classes" value="${build.tests}/classes" />
      <property name="build.tests.etc" value="${build.tests}/etc" />
      <property name="build.tests.lib" value="${build.tests}/lib" />
      <property name="build.tests.src" value="${build.tests}/src" />
   </target>

   <target name="copyTestsDatFiles" depends="initTestsBuildDirectories">
      <copy todir="${build.tests.etc}">
         <fileset dir="${project.test.res}">
            <include name="META-INF/**/*" />
            <include name="**/*.properties" />
            <include name="**/*.xml" />
            <include name="**/*.xsd" />
         </fileset>
      </copy>
   </target>

   <target name="initTestsArchiveProperties">
      <property name="carnot.tests.jarfile" value="carnot-tests.jar" />
      <property name="carnot.tests.jar" value="${build.tests.lib}/${carnot.tests.jarfile}" />

      <property name="carnot.jdbcproxy.jarfile" value="carnot-jdbc-proxy.jar" />
      <property name="carnot.jdbcproxy.jar" value="${build.tests.lib}/${carnot.jdbcproxy.jarfile}" />
   </target>

   <target name="initCodeGenTest">
      <mkdir dir="${build.dir}/temp/org/eclipse/stardust/engine/api/ejb2/beans/" />
      <mkdir dir="${build.dir}/temp/org/eclipse/stardust/engine/api/ejb2/tunneling/beans/" />
      <property name="buildtest.dir" value="${build.dir}/temp" />
   </target>

   <target name="runCodeGenTest" depends="initCodeGenTest"
      description="runs CodeGen to create Testfiles for comparing">
      <java classname="org.eclipse.stardust.engine.api.ejb2.tools.CodeGen" fork="yes">
         <classpath>
            <pathelement path="${build.classes}" />
            <path refid="carnot-engine.compile" />
            <path refid="qdox.deps" />
         </classpath>
         <arg line="${project.src} ${build.dir}/temp" />
      </java>
   </target>

   <target name="compareFiles" description="compares serviceFile with created tempFile">
      <condition property="codegen.build">
         <filesmatch file1="${service.dir}/${serviceName}" file2="${serviceTemp.dir}/${serviceName}" />
      </condition>
      <!--fail unless="codegen.build"
           message="Error: CodeGen-File ${service.dir}/${serviceName} is not up to date!"/-->
      <echo message="CodeGen-File ${service.dir}/${serviceName} is up to date!" />
   </target>

   <target name="checkCodeGen" depends="runCodeGenTest"
      description="checks if CodeGen-Files are updated">

      <!-- no tunneling -->

      <antcall target="compareFiles">
         <param name="serviceName" value="RemoteWorkflowService.java" />
      </antcall>
      <antcall target="compareFiles">
         <param name="serviceName" value="RemoteUserService.java" />
      </antcall>
      <antcall target="compareFiles">
         <param name="serviceName" value="RemoteAdministrationService.java" />
      </antcall>
      <antcall target="compareFiles">
         <param name="serviceName" value="RemoteQueryService.java" />
      </antcall>
      <antcall target="compareFiles">
         <param name="serviceName" value="RemoteDocumentManagementService.java" />
      </antcall>

      <antcall target="compareFiles">
         <param name="serviceName" value="LocalWorkflowService.java" />
      </antcall>
      <antcall target="compareFiles">
         <param name="serviceName" value="LocalUserService.java" />
      </antcall>
      <antcall target="compareFiles">
         <param name="serviceName" value="LocalAdministrationService.java" />
      </antcall>
      <antcall target="compareFiles">
         <param name="serviceName" value="LocalQueryService.java" />
      </antcall>
      <antcall target="compareFiles">
         <param name="serviceName" value="LocalDocumentManagementService.java" />
      </antcall>

      <antcall target="compareFiles">
         <param name="serviceName" value="beans/RemoteWorkflowServiceImpl.java" />
      </antcall>
      <antcall target="compareFiles">
         <param name="serviceName" value="beans/RemoteUserServiceImpl.java" />
      </antcall>
      <antcall target="compareFiles">
         <param name="serviceName" value="beans/RemoteAdministrationServiceImpl.java" />
      </antcall>
      <antcall target="compareFiles">
         <param name="serviceName" value="beans/RemoteQueryServiceImpl.java" />
      </antcall>
      <antcall target="compareFiles">
         <param name="serviceName" value="beans/RemoteDocumentManagementServiceImpl.java" />
      </antcall>

      <!-- tunneling -->

      <antcall target="compareFiles">
         <param name="serviceName" value="tunneling/TunnelingRemoteWorkflowService.java" />
      </antcall>
      <antcall target="compareFiles">
         <param name="serviceName" value="tunneling/TunnelingRemoteUserService.java" />
      </antcall>
      <antcall target="compareFiles">
         <param name="serviceName" value="tunneling/TunnelingRemoteAdministrationService.java" />
      </antcall>
      <antcall target="compareFiles">
         <param name="serviceName" value="tunneling/TunnelingRemoteQueryService.java" />
      </antcall>
      <antcall target="compareFiles">
         <param name="serviceName" value="tunneling/TunnelingRemoteDocumentManagementService.java" />
      </antcall>

      <antcall target="compareFiles">
         <param name="serviceName" value="tunneling/TunnelingLocalWorkflowService.java" />
      </antcall>
      <antcall target="compareFiles">
         <param name="serviceName" value="tunneling/TunnelingLocalUserService.java" />
      </antcall>
      <antcall target="compareFiles">
         <param name="serviceName" value="tunneling/TunnelingLocalAdministrationService.java" />
      </antcall>
      <antcall target="compareFiles">
         <param name="serviceName" value="tunneling/TunnelingLocalQueryService.java" />
      </antcall>
      <antcall target="compareFiles">
         <param name="serviceName" value="tunneling/TunnelingLocalDocumentManagementService.java" />
      </antcall>

      <antcall target="compareFiles">
         <param name="serviceName" value="tunneling/beans/TunnelingWorkflowServiceImpl.java" />
      </antcall>
      <antcall target="compareFiles">
         <param name="serviceName" value="tunneling/beans/TunnelingUserServiceImpl.java" />
      </antcall>
      <antcall target="compareFiles">
         <param name="serviceName" value="tunneling/beans/TunnelingAdministrationServiceImpl.java" />
      </antcall>
      <antcall target="compareFiles">
         <param name="serviceName" value="tunneling/beans/TunnelingQueryServiceImpl.java" />
      </antcall>
      <antcall target="compareFiles">
         <param name="serviceName" value="tunneling/beans/TunnelingDocumentManagementServiceImpl.java" />
      </antcall>

      <delete dir="${build.dir}/temp" />
   </target>
   
   <target name="initCodegen" depends="init, dependencies:init" xmlns:ivy="antlib:org.apache.ivy.ant">
      <property name="codegen.build.dir" value="${build.dir}/codegen" />
      <property name="codegen.build.classes" value="${codegen.build.dir}/classes" />
      <property name="codegen.build.dir.src" value="${codegen.build.dir}/src" />

      <mkdir dir="${codegen.build.dir}" />
      <mkdir dir="${codegen.build.classes}" />
      <mkdir dir="${codegen.build.dir.src}" />
      
      <ivy:cachepath pathid="qdox.deps" conf="qdox-module-compile" inline="true" organisation="com.infinity.bpm"
         module="infinity-process-engine-module" revision="${ipp.version.full}"/>
      <ivy:cachepath pathid="stardust-engine-core.deps" conf="engine-module-compile" inline="true" organisation="com.infinity.bpm"
         module="infinity-process-engine-module" revision="${ipp.version.full}"/>
   </target>

   <target name="codegen" depends="initCodegen, compileEjbFacadeGenerator">
      <java classname="org.eclipse.stardust.engine.api.ejb2.tools.CodeGen" fork="yes">
         <classpath>
            <pathelement path="${codegen.build.classes}" />
            <path refid="stardust-engine-core.deps" />
            <path refid="qdox.deps" />
         </classpath>
         <arg line="${project.src}" />
      </java>
   </target>

   <target name="compileEjbFacadeGenerator" depends="copyEjbFacadeGeneratorSourceFiles" description="compiles the carnot codegen classes">
      <javac srcdir="${codegen.build.dir.src}" destdir="${codegen.build.classes}" debug="true" deprecation="no" includes="**/ejb2/**/*.java">
         <classpath>
            <path refid="stardust-engine-core.deps" />
            <path refid="qdox.deps" />
         </classpath>
      </javac>
   </target>
               
   <target name="copyEjbFacadeGeneratorSourceFiles" depends="initCodegen">
      <copy todir="${codegen.build.dir.src}/org/eclipse/stardust">
         <fileset dir="${project.src}/org/eclipse/stardust">
            <include name="engine/api/ejb2/tools/CodeGen.java" />
         </fileset>
      </copy>
   </target>

   <!--
   #
   # Compound targets
   #
   -->

   <target name="build" depends="copyDatFiles, jar, jar.src, copyJars"
      description="make a usable version of the kernel" />

   <target name="deploy" depends="build, deploy.src, deploy.classes"
      description="makes a deployable version of the kernel" />

   <target name="install" if="maven.localRepository" depends="initKernelBuild"
      description="installs the artifacts into a local Maven repository">
   	
   	<ipp:init-mvn localMavenRepository="${maven.localRepository}" />
   	<ipp:mvn-install file="${carnot.engine.jar}" pomFile="${build.lib}/carnot-engine.pom" />
   	<ipp:mvn-install file="${carnot.client.jar}" pomFile="${build.lib}/carnot-client.pom" />
   	<ipp:mvn-install file="${carnot.emf.xsd.integration.jar}" pomFile="${build.lib}/carnot-emf-xsd-integration.pom" />
   	
   	<ipp:mvn-install pomFile="${build.lib}/2nd-level-cache-hazelcast-module.pom" />
   	<ipp:mvn-install pomFile="${build.lib}/ant-module.pom" />
   	<ipp:mvn-install pomFile="${build.lib}/carnot-emf-xsd-module.pom" />
   	<ipp:mvn-install pomFile="${build.lib}/client-module.pom" />
   	<ipp:mvn-install pomFile="${build.lib}/ejb21-module.pom" />
   	<ipp:mvn-install pomFile="${build.lib}/ejb30-module.pom" />
   	<ipp:mvn-install pomFile="${build.lib}/engine-module.pom" />
   	<ipp:mvn-install pomFile="${build.lib}/jcr-api-module.pom" />
   	<ipp:mvn-install pomFile="${build.lib}/jcr-jackrabbit-module.pom" />
   	<ipp:mvn-install pomFile="${build.lib}/jcr-jackrabbit-webapp-module.pom" />
   	<ipp:mvn-install pomFile="${build.lib}/jcr-vfs-module.pom" />
   	<ipp:mvn-install pomFile="${build.lib}/jms-activemq-module.pom" />
   	<ipp:mvn-install pomFile="${build.lib}/jms-api-module.pom" />
   	<ipp:mvn-install pomFile="${build.lib}/jta-api-module.pom" />
   	<ipp:mvn-install pomFile="${build.lib}/jta-jencks-module.pom" />
   	<ipp:mvn-install pomFile="${build.lib}/logging-slf4j-log4j-module.pom" />
   	<ipp:mvn-install pomFile="${build.lib}/qdox-module.pom" />
   	<ipp:mvn-install pomFile="${build.lib}/swing-client-module.pom" />
   	<ipp:mvn-install pomFile="${build.lib}/web-client-module.pom" />
   	<ipp:mvn-install pomFile="${build.lib}/xerces-module.pom" />
   	
   </target>

   <target name="publish" depends="initKernelBuild"
      description="publish artifacts into a remote Maven repository">

      <ipp:init-mvn />
      <ipp:mvn-deploy file="${carnot.engine.jar}" pomFile="${build.lib}/carnot-engine.pom" />
      <ipp:mvn-deploy file="${carnot.client.jar}" pomFile="${build.lib}/carnot-client.pom" />
      <ipp:mvn-deploy file="${carnot.emf.xsd.integration.jar}" pomFile="${build.lib}/carnot-emf-xsd-integration.pom" />
   	
      <ipp:mvn-deploy pomFile="${build.lib}/2nd-level-cache-hazelcast-module.pom" />
      <ipp:mvn-deploy pomFile="${build.lib}/ant-module.pom" />
      <ipp:mvn-deploy pomFile="${build.lib}/carnot-emf-xsd-module.pom" />
      <ipp:mvn-deploy pomFile="${build.lib}/client-module.pom" />
      <ipp:mvn-deploy pomFile="${build.lib}/ejb21-module.pom" />
      <ipp:mvn-deploy pomFile="${build.lib}/ejb30-module.pom" />
      <ipp:mvn-deploy pomFile="${build.lib}/engine-module.pom" />
      <ipp:mvn-deploy pomFile="${build.lib}/jcr-api-module.pom" />
      <ipp:mvn-deploy pomFile="${build.lib}/jcr-jackrabbit-module.pom" />
      <ipp:mvn-deploy pomFile="${build.lib}/jcr-jackrabbit-webapp-module.pom" />
      <ipp:mvn-deploy pomFile="${build.lib}/jcr-vfs-module.pom" />
      <ipp:mvn-deploy pomFile="${build.lib}/jms-activemq-module.pom" />
      <ipp:mvn-deploy pomFile="${build.lib}/jms-api-module.pom" />
      <ipp:mvn-deploy pomFile="${build.lib}/jta-api-module.pom" />
      <ipp:mvn-deploy pomFile="${build.lib}/jta-jencks-module.pom" />
      <ipp:mvn-deploy pomFile="${build.lib}/logging-slf4j-log4j-module.pom" />
      <ipp:mvn-deploy pomFile="${build.lib}/qdox-module.pom" />
      <ipp:mvn-deploy pomFile="${build.lib}/swing-client-module.pom" />
      <ipp:mvn-deploy pomFile="${build.lib}/web-client-module.pom" />
      <ipp:mvn-deploy pomFile="${build.lib}/xerces-module.pom" />
   </target>

   <target name="clean" depends="init" description="removes all build results">
      <delete dir="${build.dir}" />
   </target>

   <target name="dist" depends="deploy" if="stardust.ide.engine.dir.present">
      <copy file="${carnot.engine.jar}" todir="${stardust.ide.engine.dir}/org.eclipse.stardust.ide.engine.core/lib" />
      <copy file="${carnot.engine.src-jar}" todir="${stardust.ide.engine.dir}/org.eclipse.stardust.ide.engine.core/lib" />
      
      <copy file="${carnot.emf.xsd.integration.jar}" todir="${stardust.ide.engine.dir}/org.eclipse.stardust.ide.engine.core/lib" />
      <copy file="${carnot.emf.xsd.integration.src-jar}" todir="${stardust.ide.engine.dir}/org.eclipse.stardust.ide.engine.core/lib" />
   </target>
   
   <!-- target is invoked by stardust-engine-nls project -->
   <target name="copy-nls-resources" 
      description="copies the resources into a given folder">
      <copy todir="${build.nls.dir}">
         <fileset dir="${project.res}">
            <include name="**/*_de.properties"/>
            <include name="**/*_en.properties"/>
            <include name="**/*_zh_CN.properties"/>
            <include name="**/*_zh_TW.properties"/>
            <exclude name="**/compatibility/gui/**"/>
         </fileset>
      </copy>
   </target>
</project>
