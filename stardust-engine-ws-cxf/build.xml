<!--
    Copyright (c) 2012 SunGard CSA LLC and others.
    All rights reserved. This program and the accompanying materials
    are made available under the terms of the Eclipse Public License v1.0
    which accompanies this distribution, and is available at
    http://www.eclipse.org/legal/epl-v10.html
   
    Contributors:
       SunGard CSA LLC - initial API and implementation and/or initial documentation
 -->

<project name="stardust-engine-ws-cxf" default="build" basedir="." xmlns:ipp="com.infinity.bpm.ant.macros">

	<property name="project.dir" value="." />
	<property name="project.src" value="${project.dir}/src/main/java" />
	<property name="project.resources" value="${project.dir}/src/main/resources" />
	<property name="project.test" location="${basedir}/src/test" />
	<property name="project.test.src" location="${project.test}/java" />

	<property name="project.etc" value="${project.dir}/etc" />
	<property file="${project.etc}/private.properties" />

	<property name="artifactId" value="stardust-engine-ws-cxf" />

	<import file="${project.dir}/../../build.tools/commons-build.xml" />

	<target name="initOnDevelopment" if="setup.development">
		<echo message="Performing a development build ..." />

		<property name="javac.debuglevel" value="lines,source,vars" />
	</target>

	<target name="initOnProduction" unless="setup.development">
		<echo message="Performing a production build ..." />

		<property name="javac.debuglevel" value="lines,source" />
	</target>

	<target name="init" depends="initOnDevelopment, initOnProduction">
		<property name="build.dir" value="${project.dir}/build" />
		<property name="build.ws-api.dir" value="${build.dir}/webapps/ws-api" />
		<property name="build.tests" value="${build.dir}/tests" />
		<property name="build.tests.classes" value="${build.tests}/classes" />
	</target>


	<target name="clean" depends="init" description="removes all build results">
		<delete dir="${build.dir}" />
	</target>

	<target name="initBuild" depends="init">
		<property name="build.classes" value="${build.dir}/classes" />
		<property name="build.lib" value="${build.dir}/lib" />
		<property name="build.lib.src" value="${build.dir}/src" />
		<property name="build.src" value="${build.dir}/src" />

		<property name="stardust-engine-ws-cxf.pomfile" value="${artifactId}.pom" />
		<property name="stardust-engine-ws-cxf.pom" value="${build.lib}/${stardust-engine-ws-cxf.pomfile}" />
		<property name="stardust-engine-ws-cxf.jarfile" value="${artifactId}.jar" />
		<property name="stardust-engine-ws-cxf.jar" value="${build.lib}/${stardust-engine-ws-cxf.jarfile}" />
		<property name="stardust-engine-ws-cxf.src-jarfile" value="${artifactId}-sources.jar" />
		<property name="stardust-engine-ws-cxf.src-jar" value="${build.lib.src}/${stardust-engine-ws-cxf.src-jarfile}" />
		
		<property name="ws-api-templates.zipfile" value="ws-api-templates.zip" />
		<property name="ws-api-templates.pomfile" value="ws-api-templates.pom" />
		<property name="ws-api-templates.zip" value="${build.ws-api.dir}/../${ws-api-templates.zipfile}" />
		<property name="ws-api-templates.pom" value="${build.ws-api.dir}/../${ws-api-templates.pomfile}" />
	</target>

	<target name="initBuildDirectories" depends="initBuild">
		<mkdir dir="${build.classes}" />
		<mkdir dir="${build.tests.classes}" />
		<mkdir dir="${build.lib}" />
		<mkdir dir="${build.lib.src}" />
		<mkdir dir="${build.src}" />
	</target>

	<target name="initClasspath" depends="init, initClasspath.ivy" />

	<target name="init.ivy">
		<echo message="Using Ivy for dependency management." />
		<init-ivy />
	</target>

	<target name="initClasspath.ivy" depends="init.ivy">
		<init-ivy-classpath />

		<path id="stardust-engine-ws-cxf.classpath">
			<path refid="compile.deps" />
		</path>

		<path id="stardust-engine-ws-cxf.test.classpath">
			<path refid="test" />
		</path>
	</target>
	
   <target name="prepareSources" depends="initBuild">
      <echo message="Preparing sources for a safe but slow build." />
      <copy todir="${build.src}" overwrite="true">
         <fileset dir="${project.src}">
            <include name="**/*.java" />
         </fileset>
      </copy>
      <replace dir="${build.src}" token="import org.eclipse.xsd" 
         value="import com.infinity.bpm.thirdparty.xsd" summary="true"/>
      <replace dir="${build.src}" token="import org.eclipse.emf" 
         value="import com.infinity.bpm.thirdparty.emf" summary="true"/>
      <replace dir="${build.src}" token="import org.eclipse.stardust.engine.core.struct.emfxsd" 
         value="import org.eclipse.stardust.engine.core.struct.emfxsd.runtime" summary="true"/>
      <replace dir="${build.src}" token="import org.eclipse.stardust.engine.extensions.dms.data.emfxsd" 
         value="import org.eclipse.stardust.engine.extensions.dms.data.emfxsd.runtime" summary="true"/>
   </target>

	<target name="compile" depends="initBuildDirectories, initClasspath, prepareSources" 
		unless="skip.compile" description="Compiles the project's Java classes">
		<ipp:javac-java6 srcdir="${build.src}" destdir="${build.classes}">
			<include name="**/*.java" />
			<classpath refid="stardust-engine-ws-cxf.classpath" />
		</ipp:javac-java6>
	</target>

	<target name="jar" depends="compile, wsStub">
		<ipp:jar jarfile="${stardust-engine-ws-cxf.jar}" implementationTitle="Eclipse Process Manager - WS CXF Integration">
			<fileset dir="${build.classes}" id="fileset.stardust-engine-ws-cxf.jar">
				<include name="**/*.*" />
			</fileset>
			<!--fileset dir="${project.resources}" includes="**/*.*" /-->
         <fileset dir="${project.resources}" includes="org/eclipse/stardust/engine/ws/interactions/*.*" />
         <fileset dir="${project.resources}" includes="org/eclipse/stardust/engine/ws/integration/webservices/*.*" />
		 <fileset dir="${project.resources}" includes="META-INF/wsdl/templates/*.*" />
		 <fileset dir="${project.resources}" includes="META-INF/wadl/templates/*.*" />
		 <fileset dir="${project.resources}" includes="META-INF/cxf/*.*" />

         <!-- Resources need to be available for com.infinity.bpm.ide.wst.facet.portal.webservices -->
         <fileset dir="${project.resources}" includes="META-INF/jax-ws-cxf-context.xml" />
	     <fileset dir="${project.resources}" includes="META-INF/spring/cxf/jax-rs-cxf-context.xml" />
	     <fileset dir="${project.resources}" includes="META-INF/spring/postprocessor-context.xml" />
         <fileset dir="${project.resources}" includes="META-INF/wsdl/StardustBpmService.wsdl" />
         <fileset dir="${project.resources}" includes="META-INF/wsdl/StardustBpmService.xsd" />
         <fileset dir="${project.resources}" includes="META-INF/wsdl/StardustBpmQueryTypes.xsd" />
         <fileset dir="${project.resources}" includes="META-INF/wsdl/StardustBpmTypes.xsd" />
		</ipp:jar>
	</target>

	<target name="jar.src" depends="compile">
		<delete file="${stardust-engine-ws-cxf.src-jar}" />
		<ipp:jar jarfile="${stardust-engine-ws-cxf.src-jar}" implementationTitle="Eclipse Process Manager - WS CXF Integration Sources">
			<fileset dir="${build.src}">
				<include name="**/*.*" />
			</fileset>
		</ipp:jar>
	</target>

   <target name="wsStub" depends="init">
      <!-- TODO: seems that mapper doesn't work correctly in ant 1.6.5 so we have to move
   	     these file manually later -->
      <copy todir="${build.ws-api.dir}/WEB-INF/wsdl" overwrite="true">
         <fileset dir="${project.resources}/META-INF/wsdl">
            <!-- <include name="StardustBpmInteractionsService.wsdl"/> -->
            <!-- <include name="StardustBpmInteractionsService.xsd"/> -->
            <include name="StardustBpmService.wsdl" />
            <include name="StardustBpmService.xsd" />
            <include name="StardustBpmTypes.xsd" />
            <include name="StardustBpmQueryTypes.xsd" />
         </fileset>
      </copy>
      <copy todir="${build.ws-api.dir}/WEB-INF" overwrite="true">
         <fileset dir="${project.resources}/META-INF/">
            <include name="jax-ws-cxf-context.xml" />
         </fileset>
      </copy>
      <zip destfile="${ws-api-templates.zip}">
         <fileset dir="${build.ws-api.dir}" includes="**" />
      </zip>

   </target>

	<target name="build" depends="jar, jar.src, build.ivy" />

	<target name="build.ivy" if="dependencies.mode.ivy" depends="jar, jar.src" xmlns:ivy="antlib:org.apache.ivy.ant">
		<ivy-make-artifact-pom moduleName="ws-api-templates" packaging="zip" pomfilepath="${build.ws-api.dir}/../" />
		<ivy-publish-local artifactId="${artifactId}" artifactDir="${build.lib}" srcArtifactDir="${build.lib.src}"
			conf="stardust-engine-ws-cxf-compile, stardust-engine-ws-cxf-provided, stardust-engine-ws-cxf-runtime, stardust-engine-ws-cxf-sources, ws-api-templates" publishIvy="true">
         <additional-artifacts>
            <artifacts pattern="${build.ws-api.dir}/../ws-api-templates(-[classifier]).[ext]" />
         </additional-artifacts>
		</ivy-publish-local>
		<ivy-publish-local artifactId="${artifactId}" artifactDir="${build.lib}" conf="pom" publishIvy="false" publishPom="false">
         <additional-artifacts>
         	<artifacts pattern="${build.ws-api.dir}/../ws-api-templates(-[classifier]).[ext]" />
         </additional-artifacts>
	   </ivy-publish-local>

		<ivy-make-module-poms ivyFile="module-ivy.xml" pomFilePath="${build.lib}" moduleName="jax-ws-cxf-module" />
		<ivy-make-module-poms ivyFile="module-ivy.xml" pomFilePath="${build.lib}" moduleName="jax-rs-cxf-module" />

		<ivy:publish resolver="buildenv" conf="*" publishivy="true" artifactspattern="${build.lib}/[artifact](-[classifier]).[ext]" srcivypattern="module-ivy.xml" overwrite="true" haltonmissing="true" />

		<ivy:retrieve file="module-ivy.xml" pattern="${build.lib}/engine-ws-cxf/[artifact]-[revision].[ext]" conf="jax-ws-cxf-module-runtime" module="stardust-engine-ws-cxf-module" />
		<ivy:retrieve file="module-ivy.xml" pattern="${build.lib}/engine-ws-cxf/[artifact]-[revision].[ext]" conf="jax-rs-cxf-module-runtime" module="stardust-engine-ws-cxf-module" />

		<!-- delete duplicated archives; archives which are directly stored in lib remains -->

		<delete>
			<fileset dir="${build.lib}/engine-ws-cxf" includes="carnot-base*.jar" />
			<fileset dir="${build.lib}/engine-ws-cxf" includes="carnot-engine*.jar" />
			<fileset dir="${build.lib}/engine-ws-cxf" includes="stardust-engine*.jar" />
			<fileset dir="${build.lib}/engine-ws-cxf">
				<present present="both" targetdir="${build.lib}" />
			</fileset>
			<fileset dir="${build.lib}/engine-ws-cxf">
				<present present="both" targetdir="${build.lib}/ext" />
			</fileset>
		</delete>

	</target>
	
	<target name="deploy" depends="build" />

	<target name="dist" depends="build">
		<!-- TODO copy to which stardust plugin? -->
		<property name="ws.integration.lib.dir" value="../../ide/modeling/org.eclipse.stardust.modeling.integration.webservices/lib" />
		<mkdir dir="${ws.integration.lib.dir}" />
		<copy todir="${ws.integration.lib.dir}" overwrite="true" verbose="true">
			<fileset dir="${build.lib}">
				<include name="${stardust-engine-ws-cxf.jarfile}" />
			</fileset>
		</copy>
	</target>

   <target name="install" if="maven.localRepository" depends="initBuild"
      description="installs the artifacts into a local Maven repository">

      <ipp:init-mvn localMavenRepository="${maven.localRepository}" />
      <ipp:mvn-install file="${stardust-engine-ws-cxf.jar}" pomFile="${stardust-engine-ws-cxf.pom}" />
      <!-- FIXME: ws-api-templates.pom contains the packaging type zip which is not supported by Maven.
           So we have to define a different base POM file -->
      <ipp:mvn-install file="${ws-api-templates.zip}" pomFile="${ws-api-templates.pom}">
        <mvn-install-args>
          <arg value="-f=pom.xml" />
        </mvn-install-args>
      </ipp:mvn-install>
      <ipp:mvn-install pomFile="${build.lib}/jax-ws-cxf-module.pom" />
      <ipp:mvn-install pomFile="${build.lib}/jax-rs-cxf-module.pom" />
   </target>
   
   <target name="publish" depends="initBuild"
     description="publish artifacts into a remote Maven repository">

      <ipp:init-mvn />
      <ipp:mvn-deploy file="${stardust-engine-ws-cxf.jar}" pomFile="${stardust-engine-ws-cxf.pom}" />
      <ipp:mvn-deploy file="${ws-api-templates.zip}" pomFile="${ws-api-templates.pom}">
         <mvn-deploy-args>
            <arg value="-f=pom.xml" />
         </mvn-deploy-args>
      </ipp:mvn-deploy>
      <ipp:mvn-deploy pomFile="${build.lib}/jax-ws-cxf-module.pom" />
      <ipp:mvn-deploy pomFile="${build.lib}/jax-rs-cxf-module.pom" />
   </target>

</project>
